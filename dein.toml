# [dein.toml]

[[plugins]]
repo = 'akiya64/soifon'
hook_add = 'colorscheme Soifon'

[[plugins]]
repo = 'Shougo/defx.nvim.git'

[[plugins]]
repo = 'Shougo/deoplete.nvim.git'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'Shougo/denite.nvim.git'
hook_add = '''
call denite#custom#option('default', 'prompt', '>')
call denite#custom#map('insert', "<C-n>", '<denite:move_to_next_line>')
call denite#custom#map('insert', "<C-e>", '<denite:move_to_previous_line>')
'''

[[plugins]]
repo = 'Tpope/vim-fugitive.git'

[[plugins]]
repo = 'Editorconfig/editorconfig-vim.git'

# auto close brace
[[plugins]]
repo = 'cohama/lexima.vim'

# linting
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_fixers = {
       \ 'css': [ 'stylelint' ],
       \ 'scss': [ 'stylelint' ]
       \}
let g:ale_fix_on_save = 1
'''

[[plugins]]
repo = 'Itchyny/lightline.vim.git'
hook_add = '''
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename',  'readonly' ] ,[ 'ale' ] ],
        \   'right': [ [ 'percent', 'lineinfo' ], [ 'filetype' ], [  'fileencoding', 'fileformat' ] ]
        \   },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \   'ale': 'AleSt'
        \   }
        \ }

function! AleSt()
  let l:count = ale#statusline#Count(bufnr(''))
  let l:errors = l:count.error + l:count.style_error
  let l:warnings = l:count.warning + l:count.style_warning
  return l:count.total == 0 ? '' : 'E:' . l:errors . ' W:' . l:warnings
endfunction

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''